package com.illumi.dms.model.test_poker;import com.illumi.dms.common.utils.ESUtils;import com.illumi.dms.common.utils.ValidateObjectUtil;import com.illumi.dms.model.user.DmsUserView;import com.illumi.dms.model.user.RegdateUUID;import com.jayqqaa12.jbase.jfinal.ext.model.EasyuiModel;import com.jayqqaa12.model.easyui.DataGrid;import com.jayqqaa12.model.easyui.Form;import com.jfinal.ext.plugin.tablebind.TableBind;import com.jfinal.kit.JsonKit;import org.elasticsearch.action.search.SearchRequestBuilder;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.action.search.SearchType;import org.elasticsearch.client.transport.TransportClient;import org.elasticsearch.common.unit.TimeValue;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.aggregations.AggregationBuilder;import org.elasticsearch.search.aggregations.AggregationBuilders;import org.elasticsearch.search.aggregations.bucket.terms.Terms;import org.elasticsearch.search.aggregations.metrics.cardinality.InternalCardinality;import org.elasticsearch.search.sort.SortBuilders;import org.elasticsearch.search.sort.SortOrder;import org.slf4j.LoggerFactory;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;@TableBind(tableName = "t_user_baseinfo")public class TUserBaseIinfo extends EasyuiModel<TUserBaseIinfo> {    private static org.slf4j.Logger logger = LoggerFactory.getLogger(TUserBaseIinfo.class);    private static final long serialVersionUID = -7615377924993713398L;    private static  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd 00:00:00");    private static  SimpleDateFormat dateFormat_NOT_TIME = new SimpleDateFormat("yyyy-MM-dd");    private static  SimpleDateFormat dateFormatH = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    public static TUserBaseIinfo dao = new TUserBaseIinfo();    @Override    public DataGrid<TUserBaseIinfo> listByDataGridBySortSql(DataGrid<TUserBaseIinfo> dg, Form f, String sortStr) {        DataGrid<TUserBaseIinfo> activeUserDataGrid = super.listByDataGridBySortSql(dg, f, sortStr);        return activeUserDataGrid;    }    public  Set<Long> getAllUserOfAbroad(String where){        StringBuffer sql = new StringBuffer("select uuid from t_user_baseinfo where 1=1 ");        if(ValidateObjectUtil.isNotBlank(where)){            sql.append(" and ").append(where);        }        logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},sql:{%s}",Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getMethodName(),sql));        Set<Long>  uuids = new TreeSet<Long>();        long total = this.getCount(sql.toString());        double pageSize =  10000D;        int page =1;        int totalPage =  ValidateObjectUtil.numberIsBlankDefault(Math.ceil(total/pageSize),0,0D);        sql = new StringBuffer("select uuid from t_user_baseinfo where 1=1 ");        if(ValidateObjectUtil.isNotBlank(where)){            sql.append(" and ").append(where);        }        sql.append(" order by uuid asc limit ?,?");        for(;page<=totalPage;page++){            logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},sql:{%s},startIndex:{%s},size:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),sql,((page-1)*pageSize),pageSize));            List<TUserBaseIinfo> tUserBaseIinfoList = this.find(sql.toString(),ValidateObjectUtil.isBlankDefault((page-1)*pageSize,0,0L),ValidateObjectUtil.isBlankDefault(pageSize,10000,0L));            if(ValidateObjectUtil.isNotBlank(tUserBaseIinfoList)){                for(TUserBaseIinfo tUserBaseIinfo : tUserBaseIinfoList){                    uuids.add(ValidateObjectUtil.isBlankDefault(tUserBaseIinfo.get("uuid"),0L,0L));                }            }        }        logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},uuids:{%s}",Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getMethodName(),uuids.size()));        return uuids;    }    private long getStartTime(){        try {            Calendar calendar = Calendar.getInstance();            dateFormat.format(calendar.getTime());            return dateFormat.parse(dateFormat.format(calendar.getTime())).getTime();        }catch (ParseException ex){            ex.printStackTrace();        }        return  0L;    }    private long  getEsTodayBuyInCountOfAbroad(TransportClient client){        long starttime = getStartTime();        long endtime = System.currentTimeMillis();        Set<Long>  uuids =  this.getAllUserOfAbroad("countrycode <> 86");        if(ValidateObjectUtil.isBlank(uuids)){            logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},case:abroad uuids is null maybe error, so return 0",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName()));            return 0L;        }        SearchRequestBuilder searchRequestBuilder =  client.prepareSearch("ilumi_transaction*");        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        boolQueryBuilder.must(                QueryBuilders.rangeQuery("@timestamp")                        .from(starttime).to(endtime)        ).must(                QueryBuilders.termQuery("action_type",110000)        ).must(QueryBuilders.termsQuery("uuid",uuids));        AggregationBuilder aggregationBuilder = AggregationBuilders.cardinality("distinct").field("uuid");        searchRequestBuilder.setQuery(boolQueryBuilder)                .addAggregation(aggregationBuilder)                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH);        SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();        InternalCardinality count = searchResponse.getAggregations().get("distinct");        long   abroadBuyIn = count.getValue();        logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},allBuyIn:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),abroadBuyIn));        return abroadBuyIn;    }    private long  getEsTodayBuyInCountOnRegisterOfAbroad(TransportClient client){        long starttime = getStartTime();        long endtime = System.currentTimeMillis();        long startUUID = RegdateUUID.dao.getYesdayLastUserOfUUID();        Set<Long>  uuids =  this.getAllUserOfAbroad(String.format("countrycode <> 86 and uuid > %s", startUUID));        if(ValidateObjectUtil.isBlank(uuids)){            logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},case:abroad uuids is null maybe error, so return 0",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName()));            return 0L;        }        SearchRequestBuilder searchRequestBuilder =  client.prepareSearch("ilumi_transaction*");        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        boolQueryBuilder.must(                QueryBuilders.rangeQuery("@timestamp")                        .from(starttime).to(endtime)        ).must(                QueryBuilders.termQuery("action_type",110000)        ).must(QueryBuilders.termsQuery("uuid",uuids));        AggregationBuilder aggregationBuilder = AggregationBuilders.cardinality("distinct").field("uuid");        searchRequestBuilder.setQuery(boolQueryBuilder)                .addAggregation(aggregationBuilder)                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH);        SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();        InternalCardinality count = searchResponse.getAggregations().get("distinct");        long   abroadBuyInOnRegister = count.getValue();        logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},allBuyIn:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),abroadBuyInOnRegister));        return abroadBuyInOnRegister;    }    private long  getEsTodayBuyInCountOnRegisterOfALL(TransportClient client){        long starttime = getStartTime();        long endtime = System.currentTimeMillis();        long startUUID = RegdateUUID.dao.getYesdayLastUserOfUUID();        Set<Long>  uuids =  this.getAllUserOfAbroad(String.format(" uuid > %s", startUUID));        if(ValidateObjectUtil.isBlank(uuids)){            logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},case:abroad uuids is null maybe error, so return 0",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName()));            return 0L;        }        SearchRequestBuilder searchRequestBuilder =  client.prepareSearch("ilumi_transaction*");        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        boolQueryBuilder.must(                QueryBuilders.rangeQuery("@timestamp")                        .from(starttime).to(endtime)        ).must(                QueryBuilders.termQuery("action_type",110000)        ).must(QueryBuilders.termsQuery("uuid",uuids));        AggregationBuilder aggregationBuilder = AggregationBuilders.cardinality("distinct").field("uuid");        searchRequestBuilder.setQuery(boolQueryBuilder)                .addAggregation(aggregationBuilder)                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH);        SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();        InternalCardinality count = searchResponse.getAggregations().get("distinct");        long   abroadBuyInOnRegister = count.getValue();        logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},allBuyIn:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),abroadBuyInOnRegister));        return abroadBuyInOnRegister;    }    private long  getEsTodayBuyInCountOfAll(TransportClient client){        long starttime = getStartTime();        long endtime = System.currentTimeMillis();        SearchRequestBuilder searchRequestBuilder =  client.prepareSearch("ilumi_transaction*");        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        boolQueryBuilder.must(                QueryBuilders.rangeQuery("@timestamp")                        .from(starttime).to(endtime)        ).must(                QueryBuilders.termQuery("action_type",110000)        );        AggregationBuilder aggregationBuilder = AggregationBuilders.cardinality("distinct").field("uuid");        searchRequestBuilder.setQuery(boolQueryBuilder)                .addAggregation(aggregationBuilder)                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH);        SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();        InternalCardinality count = searchResponse.getAggregations().get("distinct");        long   allBuyIn = count.getValue();        logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},allBuyIn:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),allBuyIn));        return allBuyIn;    }    private List<DmsUserView>  getEsTodayBuyInCount(TransportClient client){        long starttime = getStartTime();        long endtime = System.currentTimeMillis();        if(ValidateObjectUtil.isBlank(client)){            new RuntimeException(String.format("参数异常>>>>>>>>>>class:{%s},method:{%s},case:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),"es 客户端为空"));        }        SearchRequestBuilder searchRequestBuilder =  client.prepareSearch("ilumi_transaction*");        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        boolQueryBuilder.must(                QueryBuilders.rangeQuery("@timestamp")                        .from(starttime).to(endtime)        ).must(                QueryBuilders.termQuery("action_type",110000)        );        AggregationBuilder aggregationBuilder = AggregationBuilders.cardinality("distinct").field("uuid");        searchRequestBuilder.setQuery(boolQueryBuilder)                .addAggregation(aggregationBuilder)                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH);                //.addSort(SortBuilders.fieldSort("uuid").order(SortOrder.DESC)).setSize(10000).setScroll(TimeValue.timeValueMinutes(2));        SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();        InternalCardinality count = searchResponse.getAggregations().get("distinct");        long   allBuyIn = count.getValue();        /*SearchHits searchHits  = searchResponse.getHits();        logger.info(String.format(">>>>>>>>class:{%s},method:{%s},allBuyIn:{%s},ScrollId(): %s ,TotalHits():%s ,length: %s",TUserBaseIinfo.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),allBuyIn,searchResponse.getScrollId(),searchResponse.getHits().getTotalHits(),searchResponse.getHits().getHits().length));        SearchHits hits = searchResponse.getHits();        Set<Long> uuids = new TreeSet<Long>();        for (SearchHit hit : hits.getHits()){            Map<String,Object> data = hit.getSourceAsMap();            uuids.add(ValidateObjectUtil.isBlankDefault(data.get("uuid"),0L,0L));        }        while (true){            searchResponse =  client.prepareSearchScroll(searchResponse.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)).execute().actionGet();            logger.info(String.format(">>>>>>>>ScrollId(): %s ,TotalHits():%s ,length: %s",searchResponse.getScrollId(),searchResponse.getHits().getTotalHits(),searchResponse.getHits().getHits().length));            hits = searchResponse.getHits();            if(hits.getHits().length == 0 ){                break;            }            for (SearchHit hit : hits.getHits()){                Map<String,Object> data = hit.getSourceAsMap();                uuids.add(ValidateObjectUtil.isBlankDefault(data.get("uuid"),0L,0L));            }        }        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->getEsTodayBuyInCount:[uuids:{%s}]",uuids.toString()));        StringBuffer sql = new StringBuffer("select * from t_user_baseinfo where countrycode = 86 and uuid in");        sql.append("(").append(uuids.toString()).append(")");        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->getEsTodayBuyInCount:[sql:{%s}]",sql.toString()));        long chinaBuyIn  = this.getCount(sql.toString());        logger.info(String.format("用户购买>>>>>>>>>>class:{%s},method:{%s},chinaBuyIn:{%s},allBuyIn:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),chinaBuyIn,allBuyIn));*/        DmsUserView todayChina =  new DmsUserView();        //todayChina.put("buyin_user_num",chinaBuyIn);        DmsUserView todayAbroad =  new DmsUserView();        //todayAbroad.put("buyin_user_num",allBuyIn-chinaBuyIn);        List<DmsUserView> list = new ArrayList<DmsUserView>();        list.add(todayChina);        list.add(todayAbroad);        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->getEsTodayBuyInCount:[result:{%s}]",JsonKit.toJson(list,8)));        return  list;    }    private List<DmsUserView>  getEsTodayBuyInCount(TransportClient client,long startUUID){        long starttime = getStartTime();        long endtime = System.currentTimeMillis();        if(ValidateObjectUtil.isBlank(client)){            new RuntimeException(String.format("参数异常>>>>>>>>>>class:{%s},method:{%s},case:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),"es 客户端为空"));        }        if(!ValidateObjectUtil.numberIsNotBlank(startUUID,0)){            new RuntimeException(String.format("参数异常>>>>>>>>>>class:{%s},method:{%s},case:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),"昨天最后一个注册用户ID 不能为空"));        }        SearchRequestBuilder searchRequestBuilder =  client.prepareSearch("ilumi_transaction*");        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        boolQueryBuilder.must(                QueryBuilders.rangeQuery("@timestamp")                        .from(starttime).to(endtime)        ).must(                QueryBuilders.termQuery("action_type",110000)        ).must(QueryBuilders.rangeQuery("uuid").gt(startUUID));        AggregationBuilder aggregationBuilder = AggregationBuilders.cardinality("distinct").field("uuid");        searchRequestBuilder.setQuery(boolQueryBuilder)                .addAggregation(aggregationBuilder)                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)                .addSort(SortBuilders.fieldSort("uuid").order(SortOrder.DESC)).setSize(5000).setScroll(TimeValue.timeValueMinutes(2));        SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();        InternalCardinality count = searchResponse.getAggregations().get("distinct");        long   allBuyIn = count.getValue();        SearchHits searchHits  = searchResponse.getHits();        logger.info(String.format(">>>>>>>>ScrollId(): %s ,TotalHits():%s ,length: %s",searchResponse.getScrollId(),searchResponse.getHits().getTotalHits(),searchResponse.getHits().getHits().length));        SearchHits hits = searchResponse.getHits();        Set<Long> uuids = new TreeSet<Long>();        for (SearchHit hit : hits.getHits()){            Map<String,Object> data = hit.getSourceAsMap();            uuids.add(ValidateObjectUtil.isBlankDefault(data.get("uuid"),0L,0L));        }        while (true){            searchResponse =  client.prepareSearchScroll(searchResponse.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)).execute().actionGet();            logger.info(String.format(">>>>>>>>ScrollId(): %s ,TotalHits():%s ,length: %s",searchResponse.getScrollId(),searchResponse.getHits().getTotalHits(),searchResponse.getHits().getHits().length));            hits = searchResponse.getHits();            if(hits.getHits().length == 0 ){                break;            }            for (SearchHit hit : hits.getHits()){                Map<String,Object> data = hit.getSourceAsMap();                uuids.add(ValidateObjectUtil.isBlankDefault(data.get("uuid"),0L,0L));            }        }        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->getEsTodayBuyInCount:[uuids:{%s}]",uuids.toString()));        StringBuffer sql = new StringBuffer("select * from t_user_baseinfo where countrycode = 86 and uuid in");        sql.append("(").append(uuids.toString()).append(")");        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->getEsTodayBuyInCount:[sql:{%s}]",sql.toString()));        long chinaBuyIn  = this.getCount(sql.toString());        logger.info(String.format("注册用户购买>>>>>>>>>>class:{%s},method:{%s},chinaBuyIn:{%s},allBuyIn:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),chinaBuyIn,allBuyIn));        DmsUserView todayChina =  new DmsUserView();        todayChina.put("regist_buyin_user_num",chinaBuyIn);        DmsUserView todayAbroad =  new DmsUserView();        todayAbroad.put("regist_buyin_user_num",allBuyIn-chinaBuyIn);        List<DmsUserView> list = new ArrayList<DmsUserView>();        list.add(todayChina);        list.add(todayAbroad);        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->getEsTodayBuyInCount:[result:{%s}]",JsonKit.toJson(list,8)));        return  list;    }    private Map<String,List<DmsUserView>> todayEsData(){        TransportClient client = ESUtils.getClient();        if(ValidateObjectUtil.isBlank(client)){        }        //long startUUID = RegdateUUID.dao.getYesdayLastUserOfUUID();        //List<DmsUserView>  todayBuyIn = this.getEsTodayBuyInCount(client);        //List<DmsUserView>  todayRegisterBuyIn = this.getEsTodayBuyInCount(client,startUUID);        //Map<String,List<DmsUserView>> result = new HashMap<>();        //result.put("todayBuyIn",todayBuyIn);        //result.put("todayRegisterBuyIn",todayRegisterBuyIn);        //return  result;        long todayBuyInCountOfAbroad = this.getEsTodayBuyInCountOfAbroad(client);        long todayBuyInCountOfALL = this.getEsTodayBuyInCountOfAll(client);        long todayBuyInCountOnRegisterOfAbroad = this.getEsTodayBuyInCountOnRegisterOfAbroad(client);        long todayBuyInCountOnRegisterOfALL = this.getEsTodayBuyInCountOnRegisterOfALL(client);        DmsUserView todayChina =  new DmsUserView();        todayChina.put("buyin_user_num",todayBuyInCountOfALL-todayBuyInCountOfAbroad);        DmsUserView todayAbroad =  new DmsUserView();        todayAbroad.put("buyin_user_num",todayBuyInCountOfAbroad);        List<DmsUserView> todayBuyIn = new ArrayList<DmsUserView>();        todayBuyIn.add(todayChina);        todayBuyIn.add(todayAbroad);        DmsUserView todayChina2 =  new DmsUserView();        todayChina.put("regist_buyin_user_num",todayBuyInCountOnRegisterOfALL- todayBuyInCountOnRegisterOfAbroad);        DmsUserView todayAbroad2 =  new DmsUserView();        todayAbroad.put("regist_buyin_user_num",todayBuyInCountOnRegisterOfAbroad);        List<DmsUserView> todayRegisterBuyIn = new ArrayList<DmsUserView>();        todayRegisterBuyIn.add(todayChina);        todayRegisterBuyIn.add(todayAbroad);        Map<String,List<DmsUserView>> result = new HashMap<>();        result.put("todayBuyIn",todayBuyIn);        result.put("todayRegisterBuyIn",todayRegisterBuyIn);        return  result;    }    private  long  todayRegisterCount(String type){        long uuid = RegdateUUID.dao.getYesdayLastUserOfUUID();        if(!ValidateObjectUtil.numberIsNotBlank(uuid,0)){            throw new RuntimeException(">>>>>>>>>>>>query exception RegdateUUID.dao.getYesdayLastUserOfUUID() return <1 value");        }        if("all".equals(type)){            String sql  = String.format("select * from t_user_baseinfo where uuid> %s  order by date desc limit 1",uuid);            logger.info(sql.toString());            long result =  this.getCount(sql);            logger.info(String.format(">>>>>>>>>>>>>>todayRegisterCount:all{%s}",result ));            return  result;        } else if("china".equals(type)){            String sql  = String.format("select * from t_user_baseinfo where countrycode  = %s and uuid > %s order by date desc limit 1",86,uuid);            logger.info(sql.toString());            long result =  this.getCount(sql);            logger.info(String.format(">>>>>>>>>>>>>>todayRegisterCount:china{%s}",result ));            return  result;        }else{            String sql  = String.format("select * from t_user_baseinfo where countrycode  <> %s and uuid > %s order by date desc limit 1",86,uuid);            logger.info(sql.toString());            long result =  this.getCount(sql);            logger.info(String.format(">>>>>>>>>>>>>>todayRegisterCount:all{%s}",result ));            return  result;        }    }    public DmsUserView todayCollectData(String type){        long all = this.todayRegisterCount("all");        long china = this.todayRegisterCount("china");        assert china>all : String.format("china: %s neq all: %s ",china,all);        List<DmsUserView> yesday =  DmsUserView.dao.getYesdayRegisterCount();        Map<String,List<DmsUserView>> todayEsData = this.todayEsData();        long chinaCollect = 0;        long abroadCollect = 0;        long allCollect = 0 ;        DmsUserView view = new DmsUserView();        view.put("date",dateFormat_NOT_TIME.format(Calendar.getInstance().getTime()));        if(ValidateObjectUtil.isNotBlank(yesday)&&yesday.size()==2) {            DmsUserView abroadView = yesday.get(0);            DmsUserView chinaView = yesday.get(1);            if ("all".equals(type)) {                abroadCollect += ValidateObjectUtil.isBlankDefault(abroadView.get("total_user_num"), 0L, 0);                chinaCollect += ValidateObjectUtil.isBlankDefault(chinaView.get("total_user_num"), 0L, 0);                view.put("total_user_num", abroadCollect + chinaCollect + all);                view.put("regist_user_num",all);                logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_user_num:[%s],regist_user_num:[%s]}",type,abroadCollect,chinaCollect,(abroadCollect + chinaCollect + all),all));                chinaCollect = 0;                abroadCollect = 0;            } else if ("china".equals(type)) {                chinaCollect += ValidateObjectUtil.isBlankDefault(chinaView.get("total_user_num"), 0L, 0);                view.put("total_user_num", chinaCollect + china);                view.put("regist_user_num",china);                logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_user_num:[%s],regist_user_num:[%s]}",type,abroadCollect,chinaCollect,(chinaCollect + china),china));                chinaCollect = 0;            } else {                abroadCollect += ValidateObjectUtil.isBlankDefault(abroadView.get("total_user_num"), 0L, 0);                view.put("total_user_num", abroadCollect + all - china);                view.put("regist_user_num",all - china);                logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_user_num:[%s],regist_user_num:[%s]}",type,abroadCollect,chinaCollect,(abroadCollect + all - china),all - china));                abroadCollect = 0;            }            if(ValidateObjectUtil.isNotBlank(todayEsData)){                List<DmsUserView> todayBuyIn = todayEsData.get("todayBuyIn");                if(ValidateObjectUtil.isNotBlank(todayBuyIn)){                    DmsUserView   _abroad = todayBuyIn.get(0);                    DmsUserView   _china = todayBuyIn.get(1);                    all = 0;                    china= 0;                    china = ValidateObjectUtil.isBlankDefault(_china.get("buyin_user_num"),0,0);                    all =  ValidateObjectUtil.isBlankDefault(_abroad.get("buyin_user_num"),0,0) + ValidateObjectUtil.isBlankDefault(_china.get("buyin_user_num"),0,0);                    if ("all".equals(type)) {                        view.put("buyin_user_num",all);                        abroadCollect += ValidateObjectUtil.isBlankDefault(abroadView.get("total_buyin_user_num"), 0L, 0);                        chinaCollect += ValidateObjectUtil.isBlankDefault(chinaView.get("total_buyin_user_num"), 0L, 0);                        view.put("total_buyin_user_num", abroadCollect + chinaCollect + all);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_buyin_user_num:[%s],buyin_user_num:[%s]}",type,abroadCollect,chinaCollect,(abroadCollect + chinaCollect + all),all));                        chinaCollect = 0;                        abroadCollect = 0;                    } else if ("china".equals(type)) {                        view.put("buyin_user_num", china);                        chinaCollect += ValidateObjectUtil.isBlankDefault(chinaView.get("total_buyin_user_num"), 0L, 0);                        view.put("total_buyin_user_num",  chinaCollect + china);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_buyin_user_num:[%s],buyin_user_num:[%s]}",type,abroadCollect,chinaCollect,(chinaCollect + china),china));;                        chinaCollect = 0;                    } else {                        view.put("buyin_user_num",  all - china);                        abroadCollect += ValidateObjectUtil.isBlankDefault(abroadView.get("total_buyin_user_num"), 0L, 0);                        view.put("total_buyin_user_num", abroadCollect  + all -china);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_buyin_user_num:[%s],buyin_user_num:[%s]}",type,abroadCollect,chinaCollect,(abroadCollect  + all -china),(all - china)));;                        chinaCollect = 0;                        abroadCollect = 0;                    }                }                List<DmsUserView> todayRegisterBuyIn = todayEsData.get("todayRegisterBuyIn");//regist_buyin_user_num                if(ValidateObjectUtil.isNotBlank(todayRegisterBuyIn)){                    DmsUserView   _abroad = todayRegisterBuyIn.get(0);                    DmsUserView   _china = todayRegisterBuyIn.get(1);                    all = 0;                    china= 0;                    china = ValidateObjectUtil.isBlankDefault(_china.get("regist_buyin_user_num"),0,0);                    all =  ValidateObjectUtil.isBlankDefault(_abroad.get("regist_buyin_user_num"),0,0) + ValidateObjectUtil.isBlankDefault(_china.get("regist_buyin_user_num"),0,0);                    if ("all".equals(type)) {                        view.put("regist_buyin_user_num", all);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],regist_buyin_user_num:[%s]}",type,all));                    } else if ("china".equals(type)) {                        view.put("regist_buyin_user_num", china);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],regist_buyin_user_num:[%s]}",type,china));                    } else {                        view.put("regist_buyin_user_num", all - china);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],regist_buyin_user_num:[%s]}",type,(all - china)));                    }                }            }        }else{            if ("all".equals(type)) {                view.put("total_user_num", all);                view.put("regist_user_num",all);                logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_user_num:[%s],regist_user_num:[%s]}",type,abroadCollect,chinaCollect,(abroadCollect + chinaCollect + all),all));            } else if ("china".equals(type)) {                view.put("total_user_num", china);                view.put("regist_user_num",china);                logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_user_num:[%s],regist_user_num:[%s]}",type,abroadCollect,chinaCollect,(chinaCollect + china),china));            } else {                view.put("total_user_num", all - china);                view.put("regist_user_num",all - china);                logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_user_num:[%s],regist_user_num:[%s]}",type,abroadCollect,chinaCollect,(abroadCollect + all - china),all - china));            }            if(ValidateObjectUtil.isNotBlank(todayEsData)){                List<DmsUserView> todayBuyIn = todayEsData.get("todayBuyIn");                if(ValidateObjectUtil.isNotBlank(todayBuyIn)){                    DmsUserView _abroad = todayBuyIn.get(0);                    DmsUserView   _china = todayBuyIn.get(1);                    all = 0;                    china= 0;                    china = ValidateObjectUtil.isBlankDefault(_china.get("buyin_user_num"),0,0);                    all =  ValidateObjectUtil.isBlankDefault(_abroad.get("buyin_user_num"),0,0) + ValidateObjectUtil.isBlankDefault(_china.get("buyin_user_num"),0,0);                    if ("all".equals(type)) {                        view.put("buyin_user_num",all);                        view.put("total_buyin_user_num", all);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_buyin_user_num:[%s],buyin_user_num:[%s]}",type,abroadCollect,chinaCollect,(abroadCollect + chinaCollect + all),all));                    } else if ("china".equals(type)) {                        view.put("buyin_user_num", china);                        view.put("total_buyin_user_num",china);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_buyin_user_num:[%s],buyin_user_num:[%s]}",type,abroadCollect,chinaCollect,(chinaCollect + china),china));;                    } else {                        view.put("buyin_user_num",  all - china);                        view.put("total_buyin_user_num", all -china);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],abroadCollect:[%s],chinaCollect:[%s],total_buyin_user_num:[%s],buyin_user_num:[%s]}",type,abroadCollect,chinaCollect,(abroadCollect  + all -china),(all - china)));;                    }                }                List<DmsUserView> todayRegisterBuyIn = todayEsData.get("todayRegisterBuyIn");//regist_buyin_user_num                if(ValidateObjectUtil.isNotBlank(todayRegisterBuyIn)){                    DmsUserView   _abroad = todayRegisterBuyIn.get(0);                    DmsUserView   _china = todayRegisterBuyIn.get(1);                    all = 0;                    china= 0;                    china = ValidateObjectUtil.isBlankDefault(_china.get("regist_buyin_user_num"),0,0);                    all =  ValidateObjectUtil.isBlankDefault(_abroad.get("regist_buyin_user_num"),0,0) + ValidateObjectUtil.isBlankDefault(_china.get("regist_buyin_user_num"),0,0);                    if ("all".equals(type)) {                        view.put("regist_buyin_user_num", all);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],regist_buyin_user_num:[%s]}",type,all));                    } else if ("china".equals(type)) {                        view.put("regist_buyin_user_num", china);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],regist_buyin_user_num:[%s]}",type,china));                    } else {                        view.put("regist_buyin_user_num", all - china);                        logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->todayCollectData:{type:[%s],regist_buyin_user_num:[%s]}",type,(all - china)));                    }                }            }        }        return  view;    }    public void collectDataUser(){            TransportClient client = ESUtils.getClient();            long starttime = getStartTime();            long endtime = System.currentTimeMillis();            if(ValidateObjectUtil.isBlank(client)){                new RuntimeException(String.format("参数异常>>>>>>>>>>class:{%s},method:{%s},case:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),"es 客户端为空"));            }            SearchRequestBuilder searchRequestBuilder =  client.prepareSearch("ilumi_transaction*");            BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();            boolQueryBuilder.must(                    QueryBuilders.rangeQuery("@timestamp")                            .from(starttime).to(endtime)            ).must(                    QueryBuilders.termQuery("action_type",110000)            ).must(QueryBuilders.rangeQuery("uuid").gt(1228160));;            AggregationBuilder aggregationBuilder = AggregationBuilders.cardinality("distinct").field("uuid");            searchRequestBuilder.setQuery(boolQueryBuilder)                    .addAggregation(aggregationBuilder)                    .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)                    .addSort(SortBuilders.fieldSort("uuid").order(SortOrder.DESC)).setSize(10000).setScroll(TimeValue.timeValueMinutes(2));            SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();            InternalCardinality count = searchResponse.getAggregations().get("distinct");            long   allBuyIn = count.getValue();            SearchHits searchHits  = searchResponse.getHits();            logger.info(String.format(">>>>>>>>class:{%s},method:{%s},allBuyIn:{%s},ScrollId(): %s ,TotalHits():%s ,length: %s",TUserBaseIinfo.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),allBuyIn,searchResponse.getScrollId(),searchResponse.getHits().getTotalHits(),searchResponse.getHits().getHits().length));            SearchHits hits = searchResponse.getHits();            long  chinaBuyIn = 0;            //StringBuffer uuids =  new StringBuffer("");            Set<Long> uuids = new TreeSet<Long>();            for (SearchHit hit : hits.getHits()){                Map<String,Object> data = hit.getSourceAsMap();                uuids.add(ValidateObjectUtil.isBlankDefault(data.get("uuid"),0L,0L));            }            while (true){                searchResponse =  client.prepareSearchScroll(searchResponse.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)).execute().actionGet();                logger.info(String.format(">>>>>>>>ScrollId(): %s ,TotalHits():%s ,length: %s",searchResponse.getScrollId(),searchResponse.getHits().getTotalHits(),searchResponse.getHits().getHits().length));                hits = searchResponse.getHits();                if(hits.getHits().length == 0 ){                    break;                }                for (SearchHit hit : hits.getHits()){                    Map<String,Object> data = hit.getSourceAsMap();                    uuids.add(ValidateObjectUtil.isBlankDefault(data.get("uuid"),0L,0L));                }            }            logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->getEsTodayBuyInCount:[uuids:{%s}]",uuids.toString()));            StringBuffer sql = new StringBuffer("select * from t_user_baseinfo where countrycode = 86 and uuid in");            sql.append("(").append(uuids.toString()).append(")");            logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->getEsTodayBuyInCount:[sql:{%s}]",sql.toString()));            //chinaBuyIn  += this.getCount(sql.toString());            logger.info(String.format(">>>>>>>>>>TUserBaseIinfo-->getEsTodayBuyInCount:[tip:{用户购买},chinaBuyIn:{%s}]",chinaBuyIn));            logger.info(String.format("用户购买>>>>>>>>>>class:{%s},method:{%s},chinaBuyIn:{%s},allBuyIn:{%s}",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName(),chinaBuyIn,allBuyIn));    }    private long  getTodayPayments(TransportClient client){        long starttime = getStartTime();        long endtime = System.currentTimeMillis();        //Set<Long>  uuids =  this.getAllUserOfAbroad("countrycode <> 86");        /*if(ValidateObjectUtil.isBlank(uuids)){            logger.info(String.format(">>>>>>>>>>class:{%s},method:{%s},case:abroad uuids is null maybe error, so return 0",DmsUserView.class.getName(),Thread.currentThread().getStackTrace()[1].getMethodName()));            return 0L;        }*/        SearchRequestBuilder searchRequestBuilder =  client.prepareSearch("ilumi_payment*");        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        /*boolQueryBuilder.must(                QueryBuilders.rangeQuery("@timestamp")                        .from(starttime).to(endtime)        );*//*.must(                QueryBuilders.termQuery("action_type",110000)        ).must(QueryBuilders.termsQuery("uuid",uuids));*/        AggregationBuilder aggregationBuilder = AggregationBuilders.terms("group_name").field("channelid");        searchRequestBuilder                .addAggregation(aggregationBuilder)                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH);        SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();        Terms termsGroup = searchResponse.getAggregations().get("group_name");        for (Terms.Bucket bucket :termsGroup.getBuckets()){            logger.info(String.format(">>>>>>>>>>key:{%s},count:{%s}",bucket.getKeyAsString(),bucket.getDocCount()));        }        //long   abroadBuyIn = count.getValue();        return 0L;    }    public static void main(String[] args) {        /*long starttime = StatisticsCollectUser.dao.getStartTime();        long endtime = System.currentTimeMillis();        long  count = StatisticsCollectUser.dao.getCount("select * from t_user_baseinfo where registertime>= ? and registertime < ?",starttime,endtime);        System.out.println(count);*/        //TUserBaseIinfo.dao.getEsTodayBuyInCount(ESUtils.getClient(),0);        //TUserBaseIinfo.dao.collectDataUser();        /*Set<Long>   list =  new  TreeSet<Long>();        list.add(20000L);        list.add(5000L);        list.add(new Long(10000L));        list.add(new Long(10000L));        System.out.println(list);*/        //System.out.println(dateFormat.format(Calendar.getInstance().getTime()));        TransportClient client = ESUtils.getClient();        TUserBaseIinfo.dao.getTodayPayments(client);    }}