package com.illumi.dms.model.test_poker;import com.illumi.dms.MyConfig;import com.illumi.dms.common.utils.ESUtils;import com.illumi.dms.common.utils.ValidateObjectUtil;import com.jayqqaa12.jbase.jfinal.ext.model.EasyuiModel;import com.jayqqaa12.model.easyui.DataGrid;import com.jayqqaa12.model.easyui.Form;import com.jfinal.ext.plugin.tablebind.TableBind;import org.elasticsearch.action.search.SearchRequestBuilder;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.action.search.SearchType;import org.elasticsearch.client.transport.TransportClient;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.search.aggregations.AggregationBuilder;import org.elasticsearch.search.aggregations.AggregationBuilders;import org.elasticsearch.search.aggregations.metrics.cardinality.InternalCardinality;import org.elasticsearch.search.sort.SortBuilders;import org.elasticsearch.search.sort.SortOrder;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;@TableBind(tableName = "t_user_baseinfo")public class StatisticsCollectUser extends EasyuiModel<StatisticsCollectUser> {    private static final long serialVersionUID = -7615377924993713398L;    private static  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-DD 00:00:00");    public static StatisticsCollectUser dao = new StatisticsCollectUser();    public  static  MyConfig dbconf = new MyConfig();    static {        //dbconf.configPlugin(new Plugins());        //DbKit.addConfig();    }    @Override    public DataGrid<StatisticsCollectUser> listByDataGridBySortSql(DataGrid<StatisticsCollectUser> dg, Form f, String sortStr) {        DataGrid<StatisticsCollectUser> activeUserDataGrid = super.listByDataGridBySortSql(dg, f, sortStr);        return activeUserDataGrid;    }    private long getStartTime(){        try {            Calendar calendar = Calendar.getInstance();            dateFormat.format(calendar.getTime());            return dateFormat.parse(dateFormat.format(calendar.getTime())).getTime();        }catch (ParseException ex){            ex.printStackTrace();        }        return  0L;    }    private void todayData(){        long starttime = getStartTime();        long endtime = System.currentTimeMillis();        if(ValidateObjectUtil.isBlank(starttime)){            return;        }        TransportClient client = ESUtils.getClient();        if(ValidateObjectUtil.isBlank(client)){}        SearchRequestBuilder searchRequestBuilder =  client.prepareSearch("ilumi_transaction*");        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        boolQueryBuilder.must(                QueryBuilders.rangeQuery("@timestamp")                       .from(starttime).to(endtime)        ).must(                QueryBuilders.termQuery("action_type",110000)        );       /*AggregationBuilder aggregationBuilder = AggregationBuilders.terms("group_name").field("uuid")                .subAggregation(AggregationBuilders.cardinality("distinct").field("uuid"))                .subAggregation(AggregationBuilders.count("count").field("uuid"));*/        AggregationBuilder aggregationBuilder = AggregationBuilders.cardinality("distinct").field("action_type");        searchRequestBuilder.setQuery(boolQueryBuilder)                .addAggregation(aggregationBuilder)                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)                .addSort(SortBuilders.fieldSort("uuid").order(SortOrder.DESC));        try {           //terms.getBuckets();            SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();            InternalCardinality count = searchResponse.getAggregations().get("distinct");        }catch (Exception ex){            ex.printStackTrace();        }    }    public long todayRegisterCount(){        long starttime = getStartTime();        long endtime = System.currentTimeMillis();        if(ValidateObjectUtil.isBlank(starttime)){            return 0;        }        return StatisticsCollectUser.dao.getCount("select * from t_user_baseinfo where registertime>= ? and registertime < ?",starttime,endtime);    }    public void collectDataUser(){        todayData();    }    public static void main(String[] args) {        long starttime = StatisticsCollectUser.dao.getStartTime();        long endtime = System.currentTimeMillis();        long  count = StatisticsCollectUser.dao.getCount("select * from t_user_baseinfo where registertime>= ? and registertime < ?",starttime,endtime);        System.out.println(count);    }}