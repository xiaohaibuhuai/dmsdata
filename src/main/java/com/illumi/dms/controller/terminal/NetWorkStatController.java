package com.illumi.dms.controller.terminal;import com.illumi.dms.common.Consts;import com.illumi.dms.common.utils.SqlUtils;import com.illumi.dms.model.terminal.NetOperator;import com.illumi.dms.model.terminal.NetWorkStat;import com.jayqqaa12.jbase.jfinal.ext.ctrl.EasyuiController;import com.jayqqaa12.model.easyui.DataGrid;import com.jayqqaa12.model.easyui.Form;import com.jfinal.ext.render.csv.CsvRender;import com.jfinal.ext.route.ControllerBind;import org.apache.log4j.Logger;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@ControllerBind(controllerKey = "/terminal/network",viewPath="/page/system")public class NetWorkStatController extends EasyuiController {    private static final Logger logger = Logger.getLogger(NetWorkStatController.class);    public void  getNetList(){        Integer page = getParaToInt(Consts.PAGE);        String order = getPara(Consts.ORDER);        String sortField = getPara(Consts.SORT_FIELD);        Map<String,Object> map = new HashMap<>();        map.put(Consts.START_TIME,getPara(Consts.START_TIME));        map.put(Consts.END_TIME,getPara(Consts.END_TIME));        map.put(Consts.IS_ABROAD,getPara(Consts.IS_ABROAD));        String where =SqlUtils.concatSql(map);        DataGrid<NetWorkStat> dg = new DataGrid();        dg.sortName = this.getPara("sort", sortField);        dg.sortOrder = this.getPara("order", order);        if (page==null){            dg.page = this.getParaToInt("page", 1);        }else {            dg.page = this.getParaToInt("page", page);        }        dg.total = this.getParaToInt("rows", getParaToInt(Consts.TOTAL));        Form form = new Form();        String limit = form.limit(dg.page, dg.total);        if(getPara(Consts.IS_ABROAD)==null){            where = SqlUtils.getGroupSql(where,"date");            where = SqlUtils.getOrderSql(where, sortField, order);            String[] fields = {"regist_user_num","active_user_num","total_user_num"};            String sumField = SqlUtils.concatFiledSql(fields, "sum(", ")");            String what =String.format("select date,net_type %s from ",sumField);            String sql = String.format("%s %s where 1=1  %s  %s",what,NetWorkStat.dao.tableName,where,limit);            renderJson(NetWorkStat.dao.myFind(sql,limit));        }else {            where = SqlUtils.getOrderSql(where, sortField, order);            renderJson(NetWorkStat.dao.listByDataGridBySortSql(dg,getFrom(NetWorkStat.dao.tableName),where));        }    }    public void  getOperatorList(){        Integer page = getParaToInt(Consts.PAGE);        String order = getPara(Consts.ORDER);        String sortField = getPara(Consts.SORT_FIELD);        Map<String,Object> map = new HashMap<>();        map.put(Consts.START_TIME,getPara(Consts.START_TIME));        map.put(Consts.END_TIME,getPara(Consts.END_TIME));        map.put(Consts.IS_ABROAD,getPara(Consts.IS_ABROAD));        String where =SqlUtils.concatSql(map);        DataGrid<NetOperator> dg = new DataGrid();        dg.sortName = this.getPara("sort", sortField);        dg.sortOrder = this.getPara("order", order);        if (page==null){            dg.page = this.getParaToInt("page", 1);        }else {            dg.page = this.getParaToInt("page", page);        }        dg.total = this.getParaToInt("rows", getParaToInt(Consts.TOTAL));        Form form = new Form();        String limit = form.limit(dg.page, dg.total);        if(getPara(Consts.IS_ABROAD)==null){            where = SqlUtils.getGroupSql(where,"date");            where = SqlUtils.getOrderSql(where, sortField, order);            String[] fields = {"total_user_num","active_user_num"};            String sumField = SqlUtils.concatFiledSql(fields, "sum(", ")");            String what =String.format("select date,operator %s from ",sumField);            String sql = String.format("%s %s where 1=1  %s  %s",what,NetOperator.dao.tableName,where,limit);            renderJson(NetOperator.dao.myFind(sql,limit));        }else {            where = SqlUtils.getOrderSql(where, sortField, order);            renderJson(NetOperator.dao.listByDataGridBySortSql(dg,getFrom(NetOperator.dao.tableName),where));        }    }    // 联网方式    public void netWorkView(){        Map<String,Object> map = new HashMap<>();        map.put(Consts.START_TIME,getPara(Consts.START_TIME));        map.put(Consts.END_TIME,getPara(Consts.END_TIME));        map.put(Consts.IS_ABROAD,getPara(Consts.IS_ABROAD));        String where =SqlUtils.concatSql(map);        where = "where 1=1" + where;        String[] fields = {"regist_user_num","active_user_num","total_user_num"};        String sumField = SqlUtils.concatFiledSql(fields, "sum(", ")");        if(getPara(Consts.IS_ABROAD)==null){            String sql =String.format("select net_type %s from %s %s group by net_type order by date asc",sumField,NetWorkStat.dao.tableName,where);            renderJson(NetWorkStat.dao.find(sql));        }else {            where =  SqlUtils.getOrderSql(where,"date","asc");            renderJson(NetWorkStat.dao.list(where));        }    }    // 运营商    public void operatorView (){        Map<String,Object> map = new HashMap<>();        map.put(Consts.START_TIME,getPara(Consts.START_TIME));        map.put(Consts.END_TIME,getPara(Consts.END_TIME));        map.put(Consts.IS_ABROAD,getPara(Consts.IS_ABROAD));        String where =SqlUtils.concatSql(map);        where = "where 1=1" + where;        String[] fields = {"total_user_num","active_user_num"};        String sumField = SqlUtils.concatFiledSql(fields, "sum(", ")");        if(getPara(Consts.IS_ABROAD)==null){            String sql =String.format("select operator %s from %s %s group by operator order by date asc",sumField,NetOperator.dao.tableName,where);            renderJson(NetOperator.dao.find(sql));        }else {            where =  SqlUtils.getOrderSql(where,"date","asc");            renderJson(NetOperator.dao.list(where));        }    }    public void networkDownLoad(){        Map<String,Object> map = new HashMap<>();        map.put(Consts.START_TIME,getPara(Consts.START_TIME));        map.put(Consts.END_TIME,getPara(Consts.END_TIME));        map.put(Consts.IS_ABROAD,getPara(Consts.IS_ABROAD));        String where =SqlUtils.concatSql(map);        List<String> header = new ArrayList();        header.add("日期");        header.add("联网方式");        header.add("新增用户数");        header.add("活跃用户");        header.add("总用户数");        List<NetWorkStat> list;        if(getPara(Consts.IS_ABROAD)==null){            String what ="select DATE_FORMAT(date,'%Y-%m-%d') date,net_type,sum(regist_user_num) regist_user_num,sum(active_user_num) active_user_num,sum(total_user_num) total_user_num from ";            where = " where 1=1" + where;            where = SqlUtils.getGroupSql(where,"date");            where = SqlUtils.getOrderSql(where,"date","desc");             list = NetWorkStat.dao.list(what, where);        }else {            list = NetWorkStat.dao.find(String.format("select * from ",NetWorkStat.dao.tableName,where));        }        render(CsvRender.me(header, list).encodeType("gbk").fileName("dms"+System.currentTimeMillis()+".csv"));    }    public void operatorDownLoad(){        Map<String,Object> map = new HashMap<>();        map.put(Consts.START_TIME,getPara(Consts.START_TIME));        map.put(Consts.END_TIME,getPara(Consts.END_TIME));        map.put(Consts.IS_ABROAD,getPara(Consts.IS_ABROAD));        String where =SqlUtils.concatSql(map);        List<String> header = new ArrayList();        header.add("日期");        header.add("累运营商");        header.add("用户数");        header.add("活跃用户");        List<NetOperator> list;        if(getPara(Consts.IS_ABROAD)==null){            String what ="select DATE_FORMAT(date,'%Y-%m-%d') date,operator as operator,sum(total_user_num) total_user_num,sum(active_user_num) active_user_num from ";            where = " where 1=1" + where;            where = SqlUtils.getGroupSql(where,"date");            where = SqlUtils.getOrderSql(where,"date","desc");            list = NetOperator.dao.list(what, where);            logger.info(String.format("sql---> %s %s %s",what,NetOperator.dao.tableName,where));        }else {            list = NetOperator.dao.find(String.format("select * from ",NetOperator.dao.tableName,where));        }        render(CsvRender.me(header, list).encodeType("gbk").fileName("dms"+System.currentTimeMillis()+".csv"));    }}