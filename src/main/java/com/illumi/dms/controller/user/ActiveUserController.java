package com.illumi.dms.controller.user;import com.illumi.dms.common.Consts;import com.illumi.dms.common.utils.SqlUtils;import com.illumi.dms.model.user.ActiveUser;import com.jayqqaa12.jbase.jfinal.ext.ctrl.EasyuiController;import com.jayqqaa12.model.easyui.DataGrid;import com.jayqqaa12.model.easyui.Form;import com.jfinal.ext.render.csv.CsvRender;import com.jfinal.ext.route.ControllerBind;import org.apache.log4j.Logger;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@ControllerBind(controllerKey = "/user/active",viewPath="/page/system")public class ActiveUserController extends EasyuiController {    private static final  Logger logger = Logger.getLogger(ActiveUserController.class);    public void  list(){        Integer page = getParaToInt(Consts.PAGE);        String order = getPara(Consts.ORDER);        String sortField = getPara(Consts.SORT_FIELD);        Map<String,Object> map = new HashMap<>();        map.put(Consts.START_TIME,getPara(Consts.START_TIME));        map.put(Consts.END_TIME,getPara(Consts.END_TIME));        map.put(Consts.IS_ABROAD,getPara(Consts.IS_ABROAD));        map.put(Consts.PERIOD,getPara(Consts.PERIOD));        String where =SqlUtils.concatSql(map);        DataGrid<ActiveUser> dg = new DataGrid();        dg.sortName = this.getPara("sort", sortField);        dg.sortOrder = this.getPara("order", order);        if (page==null){            dg.page = this.getParaToInt("page", 1);        }else {            dg.page = this.getParaToInt("page", page);        }        dg.total = this.getParaToInt("rows", getParaToInt(Consts.TOTAL));        Form form = new Form();        String limit = form.limit(dg.page, dg.total);        if(getPara(Consts.IS_ABROAD)==null){            where = SqlUtils.getGroupSql(where,"date");            where = SqlUtils.getOrderSql(where, sortField, order);            String what = "select date,sum(period_01) period_01,sum(period_07) period_07,sum(period_30) period_30 from";            String sql = String.format("%s %s where 1=1 %s %s",what,ActiveUser.dao.tableName,where,limit);            renderJson(ActiveUser.dao.myFind(sql,limit));        }else {            where = SqlUtils.getOrderSql(where, sortField, order);            renderJson(ActiveUser.dao.listByDataGridBySortSql(dg,getFrom(ActiveUser.dao.tableName),where));        }    }    public void foldLine(){        Map<String,Object> map = new HashMap<>();        map.put(Consts.START_TIME,getPara(Consts.START_TIME));        map.put(Consts.END_TIME,getPara(Consts.END_TIME));        map.put(Consts.IS_ABROAD,getPara(Consts.IS_ABROAD));        map.put(Consts.PERIOD,getPara(Consts.PERIOD));        String where =SqlUtils.concatSql(map);        where = "where 1=1" + where;        if(getPara(Consts.IS_ABROAD)==null){            String sql =String.format("select date,sum(period_01) period_01,sum(period_07) period_07,sum(period_30) period_30 from %s %s group by date order by date asc",ActiveUser.dao.tableName,where);            renderJson(ActiveUser.dao.find(sql));        }else {            where =  SqlUtils.getOrderSql(where,"date","asc");            renderJson(ActiveUser.dao.list(where));        }    }    public void download(){        Map<String,Object> map = new HashMap<>();        map.put(Consts.START_TIME,getPara(Consts.START_TIME));        map.put(Consts.END_TIME,getPara(Consts.END_TIME));        map.put(Consts.IS_ABROAD,getPara(Consts.IS_ABROAD));        String where =SqlUtils.concatSql(map);        List<String> header = new ArrayList();        header.add("日期");        header.add("当日活跃用户");        header.add("过去7日活跃用户");        header.add("过去30日活跃用户");        String what ="select DATE_FORMAT(date,'%Y-%m-%d') date,sum(period_01) period_01,sum(period_07) period_07,sum(period_30) period_30 from ";        where = " where 1=1" + where;        where = SqlUtils.getGroupSql(where,"date");        where = SqlUtils.getOrderSql(where,"date","desc");        List<ActiveUser> list = ActiveUser.dao.list(what, where);        logger.info(String.format("sql---> %s %s %s",what,ActiveUser.dao.tableName,where));        render(CsvRender.me(header, list).encodeType("gbk").fileName("dms"+System.currentTimeMillis()+".csv"));    }}