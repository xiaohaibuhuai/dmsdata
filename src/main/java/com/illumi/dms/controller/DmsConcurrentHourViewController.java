package com.illumi.dms.controller;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.illumi.dms.common.Consts;import com.illumi.dms.common.utils.ValidateObjectUtil;import com.illumi.dms.model.user.DmsDiamondConsumeView;import com.jayqqaa12.jbase.jfinal.ext.ctrl.EasyuiController;import com.jfinal.ext.route.ControllerBind;import org.slf4j.LoggerFactory;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.List;@ControllerBind(controllerKey = "/statistic/dmsconcurrenthourview/user",viewPath="/page/system")public class DmsConcurrentHourViewController extends EasyuiController {    //private static final  Logger logger = Logger.getLogger(DmsUserVewController.class);    org.slf4j.Logger logger = LoggerFactory.getLogger(DmsConcurrentHourViewController.class);    private static  final  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");    public void  list(){        JSONObject josn = new JSONObject();        String startDate= getPara("startDate");        String endDate= getPara("endDate");        String sort= ValidateObjectUtil.isBlankDefault(getPara("sort"),"date");        String by= ValidateObjectUtil.isBlankDefault(getPara("by"),"desc");        String type= ValidateObjectUtil.isBlankDefault(getPara("_type"),"all");        int page = this.getParaToInt("page", 1);        int rows = this.getParaToInt("rows", 10);        if(ValidateObjectUtil.isBlank(startDate)){            Calendar calendar = Calendar.getInstance();            calendar.add(Calendar.DAY_OF_MONTH,-7);            startDate =  dateFormat.format(calendar.getTime());        }        getPara(Consts.IS_ABROAD);        StringBuffer sql = new StringBuffer("select 1 as gpid, date,")                .append(" sum(delayed_tool) as delayed_tool, ")                .append(" sum(league_set) as league_set, ")                .append(" sum(club_push) as club_push, ")                .append(" sum(club_nickname_change) as club_nickname_change, ")                .append(" sum(user_nickname_change) as user_nickname_change, ")                .append(" sum(mtt_ticket) as mtt_ticket, ")                .append(" sum(gold_card) as gold_card, ")                .append(" sum(platinum_card) as platinum_card ")                .append(" from dms__view where 1=1");        if(ValidateObjectUtil.isNotBlank(startDate)){            sql.append(" and date ").append(">= '").append(startDate).append("'");        }        if(ValidateObjectUtil.isNotBlank(endDate)){            sql.append(" and date ").append("< '").append(endDate).append("'");        }        if(ValidateObjectUtil.isNotBlank(type)){            if(type.equals("all")){                sql.append(" group by ").append(" date ");            }else if(type.equals("abroad")){                sql.append(" and is_abroad ").append("=").append("1");                sql.append(" group by ").append(" date ");            }else {                sql.append(" and is_abroad ").append("=").append("0");                sql.append(" group by ").append(" date ");            }        }        long total = DmsDiamondConsumeView.dao.getCountByWhere(String.format("( %s ) as tocount ",sql.toString()));        logger.info(String.format(">>>>>>>>>>>>>total:{%s}", JSON.toJSON(total)));        josn.put("total",total);        if(ValidateObjectUtil.isNotBlank(sort)){            sql.append(" order by ").append(sort).append(" ").append(by);        }        long startIndex  = (page-1)*rows;        sql.append(" limit ").append(startIndex).append(" , ").append(rows);        List<DmsDiamondConsumeView> list = DmsDiamondConsumeView.dao.find(sql.toString());        if(ValidateObjectUtil.isNotBlank(list)){            josn.put("rows",list);        }else {            josn.put("rows",null);        }        renderJson(josn);    }    public void  chartdata(){        JSONObject json = new JSONObject();        StringBuffer sql = new StringBuffer("select 1 as gpid, date,")                .append(" sum(delayed_tool) as delayed_tool, ")                .append(" sum(league_set) as league_set, ")                .append(" sum(club_push) as club_push, ")                .append(" sum(club_nickname_change) as club_nickname_change, ")                .append(" sum(user_nickname_change) as user_nickname_change, ")                .append(" sum(mtt_ticket) as mtt_ticket, ")                .append(" sum(gold_card) as gold_card, ")                .append(" sum(platinum_card) as platinum_card ")                .append(" from dms_diamond_consume_view where 1=1");        String starDate= getPara("startDate");        logger.info(String.format(">>>>>>startDate:%s", starDate));        if(ValidateObjectUtil.isBlank(starDate)){            Calendar calendar = Calendar.getInstance();            calendar.add(Calendar.DAY_OF_MONTH,-7);            starDate =  dateFormat.format(calendar.getTime());        }        String endDate= ValidateObjectUtil.isBlankDefault(getPara("endDate"),dateFormat.format(Calendar.getInstance().getTime()));        logger.info(String.format(">>>>>>startDate:%s", endDate));        String type= ValidateObjectUtil.isBlankDefault(getPara("_type"),"all");        if(ValidateObjectUtil.isNotBlank(starDate)){            sql.append(" and date").append(">= '").append(starDate).append("'");        }        if(ValidateObjectUtil.isNotBlank(endDate)) {            sql.append(" and date").append("< '").append(endDate).append("'");        }        if(ValidateObjectUtil.isNotBlank(type)){            if(type.equals("all")){                sql.append(" and is_abroad ").append("in (").append("1,0 )");            }else if(type.equals("abroad")){                sql.append(" and is_abroad ").append("=").append("1");            }else {                sql.append(" and is_abroad ").append("=").append("0");            }        }        logger.info(String.format(">>>>>>>>>>>>>>>sql:%s", sql.toString()));        List<DmsDiamondConsumeView> result= DmsDiamondConsumeView.dao.find(sql.toString());        //logger.info(String.format(">>>>>>>>>>>>>>>result:%s", JsonKit.toJson(result,8)));        if(ValidateObjectUtil.isNotBlank(result)){            List<String>  dates= new ArrayList<>(2);            JSONArray listData =  new JSONArray();            for(DmsDiamondConsumeView view : result){                dates.add(0,starDate);                dates.add(1,endDate);                JSONObject object101 = new JSONObject();                object101.put("name","延时道具");                object101.put("value",ValidateObjectUtil.isBlankDefault(view.get("delayed_tool"),0,0));                listData.add(object101);                JSONObject object102 = new JSONObject();                object102.put("name","联盟局");                object102.put("value",ValidateObjectUtil.isBlankDefault(view.get("league_set"),0,0));                listData.add(object102);                JSONObject object201 = new JSONObject();                object201.put("name","俱乐部推送");                object201.put("value",ValidateObjectUtil.isBlankDefault(view.get("club_push"),0,0));                listData.add(object201);                JSONObject object202 = new JSONObject();                object202.put("name","俱乐部改名");                object202.put("value",ValidateObjectUtil.isBlankDefault(view.get("club_nickname_change"),0,0));                listData.add(object202);                JSONObject object301 = new JSONObject();                object301.put("name","玩家改名");                object301.put("value",ValidateObjectUtil.isBlankDefault(view.get("user_nickname_change"),0,0));                listData.add(object301);                JSONObject object302 = new JSONObject();                object302.put("name","mtt门票");                object302.put("value",ValidateObjectUtil.isBlankDefault(view.get("mtt_ticket"),0,0));                listData.add(object302);                JSONObject object303 = new JSONObject();                object303.put("name","兑换金卡");                object303.put("value",ValidateObjectUtil.isBlankDefault(view.get("gold_card"),0,0));                listData.add(object303);                JSONObject object401 = new JSONObject();                object401.put("name","兑换白金卡");                object401.put("value",ValidateObjectUtil.isBlankDefault(view.get("platinum_card"),0,0));                listData.add(object401);            }            json.put("dates",dates);            json.put("series.data",listData);            logger.info(String.format(">>>>>>>>>>>>>infomation:{%s}", JSON.toJSON(json)));        }else{            json.put("dates",null);            json.put("series.data",null);        }        renderJson(json);    }}