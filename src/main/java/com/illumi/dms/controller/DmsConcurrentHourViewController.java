package com.illumi.dms.controller;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.illumi.dms.common.Consts;import com.illumi.dms.common.utils.ValidateObjectUtil;import com.illumi.dms.model.user.DmsConcurrentHourView;import com.illumi.dms.model.user.DmsDiamondConsumeView;import com.jayqqaa12.jbase.jfinal.ext.ctrl.EasyuiController;import com.jfinal.ext.route.ControllerBind;import org.slf4j.LoggerFactory;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.List;@ControllerBind(controllerKey = "/statistic/dmsconcurrenthourview/user",viewPath="/page/system")public class DmsConcurrentHourViewController extends EasyuiController {    org.slf4j.Logger logger = LoggerFactory.getLogger(DmsConcurrentHourViewController.class);    private static  final  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");    public void  list(){        JSONObject josn = new JSONObject();        String startDate= getPara("startDate");        String endDate= getPara("endDate");        String sort= ValidateObjectUtil.isBlankDefault(getPara("sort"),"date");        String by= ValidateObjectUtil.isBlankDefault(getPara("by"),"desc");        String type= ValidateObjectUtil.isBlankDefault(getPara("_type"),"all");        int page = this.getParaToInt("page", 1);        int rows = this.getParaToInt("rows", 10);        if(ValidateObjectUtil.isBlank(startDate)){            Calendar calendar = Calendar.getInstance();            calendar.add(Calendar.DAY_OF_MONTH,-7);            startDate =  dateFormat.format(calendar.getTime());        }        getPara(Consts.IS_ABROAD);        StringBuffer sql = new StringBuffer("select 1 as gpid, date,")                .append(" sum(times_01) as times_01, ")                .append(" sum(times_02) as times_02, ")                .append(" sum(times_03) as times_03, ")                .append(" sum(times_04) as times_04, ")                .append(" sum(times_05) as times_05, ")                .append(" sum(times_06) as times_06, ")                .append(" sum(times_07) as times_07, ")                .append(" sum(times_08) as times_08, ")                .append(" sum(times_09) as times_09, ")                .append(" sum(times_10) as times_10, ")                .append(" sum(times_11) as times_11, ")                .append(" sum(times_12) as times_12, ")                .append(" sum(times_13) as times_13, ")                .append(" sum(times_14) as times_14, ")                .append(" sum(times_15) as times_15, ")                .append(" sum(times_16) as times_16, ")                .append(" sum(times_17) as times_17, ")                .append(" sum(times_18) as times_18, ")                .append(" sum(times_19) as times_19, ")                .append(" sum(times_20) as times_20, ")                .append(" sum(times_21) as times_21, ")                .append(" sum(times_22) as times_22, ")                .append(" sum(times_23) as times_23, ")                .append(" sum(times_24) as times_24 ")                .append(" from dms_concurrent_hour_view where 1=1");        if(ValidateObjectUtil.isNotBlank(startDate)){            sql.append(" and date ").append("= '").append(startDate).append("'");        }       /* if(ValidateObjectUtil.isNotBlank(endDate)){            sql.append(" and date ").append("< '").append(endDate).append("'");        }*/        if(ValidateObjectUtil.isNotBlank(type)){            if(type.equals("all")){                sql.append(" group by ").append(" date ");            }else if(type.equals("abroad")){                sql.append(" and is_abroad ").append("=").append("1");                sql.append(" group by ").append(" date ");            }else {                sql.append(" and is_abroad ").append("=").append("0");                sql.append(" group by ").append(" date ");            }        }        long total = DmsConcurrentHourView.dao.getCountByWhere(String.format("( %s ) as tocount ",sql.toString()));        logger.info(String.format(">>>>>>>>>>>>>total:{%s}", JSON.toJSON(total)));        josn.put("total",total);        if(ValidateObjectUtil.isNotBlank(sort)){            sql.append(" order by ").append(sort).append(" ").append(by);        }        long startIndex  = (page-1)*rows;        sql.append(" limit ").append(startIndex).append(" , ").append(rows);        List<DmsConcurrentHourView> list = DmsConcurrentHourView.dao.find(sql.toString());        if(ValidateObjectUtil.isNotBlank(list)){            josn.put("rows",list);        }else {            josn.put("rows",null);        }        renderJson(josn);    }    public void  chartdata(){        JSONObject json = new JSONObject();        StringBuffer sql = new StringBuffer("select 1 as gpid, date,")                .append(" sum(times_01) as times_01, ")                .append(" sum(times_02) as times_02, ")                .append(" sum(times_03) as times_03, ")                .append(" sum(times_04) as times_04, ")                .append(" sum(times_05) as times_05, ")                .append(" sum(times_06) as times_06, ")                .append(" sum(times_07) as times_07, ")                .append(" sum(times_08) as times_08, ")                .append(" sum(times_09) as times_09, ")                .append(" sum(times_10) as times_10, ")                .append(" sum(times_11) as times_11, ")                .append(" sum(times_12) as times_12, ")                .append(" sum(times_13) as times_13, ")                .append(" sum(times_14) as times_14, ")                .append(" sum(times_15) as times_15, ")                .append(" sum(times_16) as times_16, ")                .append(" sum(times_17) as times_17, ")                .append(" sum(times_18) as times_18, ")                .append(" sum(times_19) as times_19, ")                .append(" sum(times_20) as times_20, ")                .append(" sum(times_21) as times_21, ")                .append(" sum(times_22) as times_22, ")                .append(" sum(times_23) as times_23, ")                .append(" sum(times_24) as times_24 ")                .append(" from dms_concurrent_hour_view where 1=1");        String startDate= getPara("startDate");        logger.info(String.format(">>>>>>startDate:%s", startDate));        if(ValidateObjectUtil.isBlank(startDate)){            Calendar calendar = Calendar.getInstance();            calendar.add(Calendar.DAY_OF_MONTH,-7);            startDate =  dateFormat.format(calendar.getTime());        }        String endDate= ValidateObjectUtil.isBlankDefault(getPara("endDate"),dateFormat.format(Calendar.getInstance().getTime()));        logger.info(String.format(">>>>>>startDate:%s", endDate));        String type= ValidateObjectUtil.isBlankDefault(getPara("_type"),"all");        if(ValidateObjectUtil.isNotBlank(startDate)){            sql.append(" and date").append("= '").append(startDate).append("'");        }       /* if(ValidateObjectUtil.isNotBlank(endDate)) {            sql.append(" and date").append("< '").append(endDate).append("'");        }*/        if(ValidateObjectUtil.isNotBlank(type)){            if(type.equals("all")){                sql.append(" group by ").append(" date ");            }else if(type.equals("abroad")){                sql.append(" and is_abroad ").append("=").append("1");                sql.append(" group by ").append(" date ");            }else {                sql.append(" and is_abroad ").append("=").append("0");                sql.append(" group by ").append(" date ");            }        }        logger.info(String.format(">>>>>>>>>>>>>>>sql:%s", sql.toString()));        List<DmsConcurrentHourView> result= DmsConcurrentHourView.dao.find(sql.toString());        if(ValidateObjectUtil.isNotBlank(result)){            logger.info(String.format(">>>>>>>>>>>>>>>result.size:%s",result.size()));            List<String>  dates= new ArrayList<>(24);            List<String>  data= new ArrayList<>(24);            int currentIndex = 0;            DmsConcurrentHourView view = result.get(0);            for(int i =0; i< 24;i ++){                if(i == result.size()-1){                    currentIndex = i;                }                logger.info(String.format("times_%02d:%s",i,ValidateObjectUtil.isBlankDefault(view.get(String.format("times_%02d",i)),"-")));                data.add(ValidateObjectUtil.isBlankDefault(view.get(String.format("times_%02d",i)),"-"));                dates.add(String.format("%02d:00",(i+1)));            }            json.put("xAxis.data",dates);            json.put("series.data",data);            json.put("index",currentIndex);            json.put("date",startDate);        }else{            json.put("xAxis.data",null);            json.put("series.data",null);            json.put("date",startDate);        }        renderJson(json);    }}