package com.illumi.dms.controller;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.illumi.dms.common.Consts;import com.illumi.dms.common.utils.ValidateObjectUtil;import com.illumi.dms.model.user.DmsCoinConsumeView;import com.illumi.dms.model.user.DmsPayChanelView;import com.jayqqaa12.jbase.jfinal.ext.ctrl.EasyuiController;import com.jayqqaa12.model.easyui.DataGrid;import com.jfinal.ext.route.ControllerBind;import org.slf4j.LoggerFactory;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.List;@ControllerBind(controllerKey = "/statistic/dmscoinview/user",viewPath="/page/system")public class DmsCoinConsumeViewController extends EasyuiController {    //private static final  Logger logger = Logger.getLogger(DmsUserVewController.class);    org.slf4j.Logger logger = LoggerFactory.getLogger(DmsCoinConsumeViewController.class);    private static  final  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");    public void  list(){        JSONObject josn = new JSONObject();        String startDate= getPara("startDate");        String endDate= getPara("endDate");        String sort= ValidateObjectUtil.isBlankDefault(getPara("sort"),"date");        String by= ValidateObjectUtil.isBlankDefault(getPara("by"),"desc");        String type= ValidateObjectUtil.isBlankDefault(getPara("_type"),"all");        int page = this.getParaToInt("page", 1);        int rows = this.getParaToInt("rows", 10);        if(ValidateObjectUtil.isBlank(startDate)){            Calendar calendar = Calendar.getInstance();            calendar.add(Calendar.DAY_OF_MONTH,-7);            startDate =  dateFormat.format(calendar.getTime());        }        getPara(Consts.IS_ABROAD);        StringBuffer sql = new StringBuffer("select 1 as gpid, date,")                .append(" sum(service_fee) as service_fee, ")                .append(" sum(reward_service_fee) as reward_service_fee, ")                .append(" sum(mtt_enter) as mtt_enter, ")                .append(" sum(magic_emoji) as magic_emoji, ")                .append(" sum(interactive_props) as interactive_props, ")                .append(" sum(low_barrage) as low_barrage, ")                .append(" sum(mid_barrage) as mid_barrage, ")                .append(" sum(high_barrage) as high_barrage, ")                .append(" sum(draw_card) as draw_card, ")                .append(" sum(poker) as poker, ")                .append(" sum(caribbeangame) as caribbeangame, ")                .append(" sum(cocklain) as cocklain, ")                .append(" sum(eight_eight) as eight_eight, ")                .append(" sum(car_game) as car_game, ")                .append(" sum(fishing) as fishing, ")                .append(" sum(total_emoji) as total_emoji, ")                .append(" sum(total_barrage) as total_barrage, ")                .append(" sum(total_minigame) as total_minigame ")                .append(" from dms_coin_consume_view where 1=1");        if(ValidateObjectUtil.isNotBlank(startDate)){            sql.append(" and date ").append(">= '").append(startDate).append("'");        }        if(ValidateObjectUtil.isNotBlank(endDate)){            sql.append(" and date ").append("< '").append(endDate).append("'");        }        if(ValidateObjectUtil.isNotBlank(type)){            if(type.equals("all")){                sql.append(" group by ").append(" date ");            }else if(type.equals("abroad")){                sql.append(" and is_abroad ").append("=").append("1");                sql.append(" group by ").append(" date ");            }else {                sql.append(" and is_abroad ").append("=").append("0");                sql.append(" group by ").append(" date ");            }        }        long total = DmsCoinConsumeView.dao.getCountByWhere(String.format("( %s ) as tocount ",sql.toString()));        logger.info(String.format(">>>>>>>>>>>>>total:{%s}", JSON.toJSON(total)));        josn.put("total",total);        if(ValidateObjectUtil.isNotBlank(sort)){            sql.append(" order by ").append(sort).append(" ").append(by);        }        long startIndex  = (page-1)*rows;        sql.append(" limit ").append(startIndex).append(" , ").append(rows);        List<DmsCoinConsumeView> list = DmsCoinConsumeView.dao.find(sql.toString());        if(ValidateObjectUtil.isNotBlank(list)){            josn.put("rows",list);        }else {            josn.put("rows",null);        }        renderJson(josn);    }    public void  chartdata(){        JSONObject json = new JSONObject();        StringBuffer sql = new StringBuffer("select 1 as gpid, date,")                .append(" sum(service_fee) as service_fee, ")                .append(" sum(reward_service_fee) as reward_service_fee, ")                .append(" sum(mtt_enter) as mtt_enter, ")                .append(" sum(magic_emoji) as magic_emoji, ")                .append(" sum(interactive_props) as interactive_props, ")                .append(" sum(low_barrage) as low_barrage, ")                .append(" sum(mid_barrage) as mid_barrage, ")                .append(" sum(high_barrage) as high_barrage, ")                .append(" sum(draw_card) as draw_card, ")                .append(" sum(poker) as poker, ")                .append(" sum(caribbeangame) as caribbeangame, ")                .append(" sum(cocklain) as cocklain, ")                .append(" sum(eight_eight) as eight_eight, ")                .append(" sum(car_game) as car_game, ")                .append(" sum(fishing) as fishing, ")                .append(" sum(total_emoji) as total_emoji, ")                .append(" sum(total_barrage) as total_barrage, ")                .append(" sum(total_minigame) as total_minigame ")                .append(" from dms_coin_consume_view where 1=1");        String starDate= getPara("startDate");        logger.info(String.format(">>>>>>startDate:%s", starDate));        if(ValidateObjectUtil.isBlank(starDate)){            Calendar calendar = Calendar.getInstance();            calendar.add(Calendar.DAY_OF_MONTH,-7);            starDate =  dateFormat.format(calendar.getTime());        }        String endDate= ValidateObjectUtil.isBlankDefault(getPara("endDate"),dateFormat.format(Calendar.getInstance().getTime()));        logger.info(String.format(">>>>>>startDate:%s", endDate));        String type= ValidateObjectUtil.isBlankDefault(getPara("_type"),"all");        if(ValidateObjectUtil.isNotBlank(starDate)){            sql.append(" and date").append(">= '").append(starDate).append("'");        }        if(ValidateObjectUtil.isNotBlank(endDate)) {            sql.append(" and date").append("< '").append(endDate).append("'");        }        if(ValidateObjectUtil.isNotBlank(type)){            if(type.equals("all")){                sql.append(" and is_abroad ").append("in (").append("1,0 )");            }else if(type.equals("abroad")){                sql.append(" and is_abroad ").append("=").append("1");            }else {                sql.append(" and is_abroad ").append("=").append("0");            }        }        /*String querySql="";        if(ValidateObjectUtil.isNotBlank(type)){            if(type.equals("all")){                querySql =String.format(sql.toString(),starDate,endDate,"1,0");            }else if(type.equals("abroad")){                querySql =String.format(sql.toString(),starDate,endDate,"1");            }else {                querySql =String.format(sql.toString(),starDate,endDate,"0");            }        }*/        logger.info(String.format(">>>>>>>>>>>>>>>sql:%s", sql.toString()));        List<DmsCoinConsumeView> result= DmsCoinConsumeView.dao.find(sql.toString());        //logger.info(String.format(">>>>>>>>>>>>>>>result:%s", JsonKit.toJson(result,8)));        if(ValidateObjectUtil.isNotBlank(result)){            List<String>  dates= new ArrayList<>(2);            JSONArray listData =  new JSONArray();            for(DmsCoinConsumeView view : result){                dates.add(0,starDate);                dates.add(1,endDate);                JSONObject object101 = new JSONObject();                object101.put("name","服务费");                object101.put("value",ValidateObjectUtil.isBlankDefault(view.get("service_fee"),0,0));                listData.add(object101);                JSONObject object102 = new JSONObject();                object102.put("name","打赏牌普服务");                object102.put("value",ValidateObjectUtil.isBlankDefault(view.get("reward_service_fee"),0,0));                listData.add(object102);                JSONObject object201 = new JSONObject();                object201.put("name","德扑币报名MTT");                object201.put("value",ValidateObjectUtil.isBlankDefault(view.get("mtt_enter"),0,0));                listData.add(object201);                JSONObject object202 = new JSONObject();                object202.put("name","魔法表情");                object202.put("value",ValidateObjectUtil.isBlankDefault(view.get("magic_emoji"),0,0));                listData.add(object202);                JSONObject object301 = new JSONObject();                object301.put("name","互动道具");                object301.put("value",ValidateObjectUtil.isBlankDefault(view.get("interactive_props"),0,0));                listData.add(object301);                JSONObject object302 = new JSONObject();                object302.put("name","普通弹幕");                object302.put("value",ValidateObjectUtil.isBlankDefault(view.get("low_barrage"),0,0));                listData.add(object302);                JSONObject object303 = new JSONObject();                object303.put("name","酷玩弹幕");                object303.put("value",ValidateObjectUtil.isBlankDefault(view.get("mid_barrage"),0,0));                listData.add(object303);                JSONObject object401 = new JSONObject();                object401.put("name","炫彩弹幕");                object401.put("value",ValidateObjectUtil.isBlankDefault(view.get("high_barrage"),0,0));                listData.add(object401);                JSONObject object402 = new JSONObject();                object402.put("name","翻翻看消耗");                object402.put("value",ValidateObjectUtil.isBlankDefault(view.get("draw_card"),0,0));                listData.add(object402);                JSONObject object403 = new JSONObject();                object403.put("name","扑克机");                object403.put("value",ValidateObjectUtil.isBlankDefault(view.get("poker"),0,0));                listData.add(object403);                JSONObject object404 = new JSONObject();                object404.put("name","加勒比");                object404.put("value",ValidateObjectUtil.isBlankDefault(view.get("caribbeangame"),0,0));                listData.add(object404);                JSONObject object405 = new JSONObject();                object405.put("name","牛牛_一粒大米");                object405.put("value",ValidateObjectUtil.isBlankDefault(view.get("cocklain"),0,0));                listData.add(object405);                JSONObject object406 = new JSONObject();                object406.put("name","八八碰_一粒大米");                object406.put("value",ValidateObjectUtil.isBlankDefault(view.get("eight_eight"),0,0));                listData.add(object406);                JSONObject object501 = new JSONObject();                object501.put("name","奔驰宝马_一粒大米");                object501.put("value",ValidateObjectUtil.isBlankDefault(view.get("car_game"),0,0));                listData.add(object501);                JSONObject object502 = new JSONObject();                object502.put("name","捕鱼_一粒大米");                object502.put("value",ValidateObjectUtil.isBlankDefault(view.get("fishing"),0,0));                listData.add(object502);/*                JSONObject object601 = new JSONObject();                object601.put("name","表情总消耗");                object601.put("value",ValidateObjectUtil.isBlankDefault(view.get("total_emoji"),0,0));                listData.add(object601);                JSONObject object602 = new JSONObject();                object602.put("name","弹幕总消耗");                object602.put("value",ValidateObjectUtil.isBlankDefault(view.get("total_barrage"),0,0));                listData.add(object602);                JSONObject object603 = new JSONObject();                object603.put("name","小游戏总消耗");                object603.put("value",ValidateObjectUtil.isBlankDefault(view.get("total_minigame"),0,0));                listData.add(object603);*/            }            json.put("dates",dates);            json.put("series.data",listData);            logger.info(String.format(">>>>>>>>>>>>>infomation:{%s}", JSON.toJSON(json)));        }else{            json.put("dates",null);            json.put("series.data",null);        }        renderJson(json);    }}